Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].




public class Solution {
    public int[][] Merge(int[][] intervals) {
        if(intervals.Length == 0){
        return intervals;
    }
    Array.Sort(intervals, (a, b) => { return a[0] - b[0]; });
    int start = intervals[0][0];
    int end = intervals[0][1];
    List<List<int>> list = new List<System.Collections.Generic.List<int>>();
    
    foreach (var item in intervals)
    {
        if(item[0] == start){
            start = item[0];
        }
        if(item[0] <= end){
            end = Math.Max(end,item[1]);
        }
        else{
            list.Add(new List<int>{start,end});
            start = item[0];
            end = item[1];
        }
    }
    list.Add(new List<int>{start,end});
    
    return list.Select(l => l.ToArray()).ToArray();
    }
}